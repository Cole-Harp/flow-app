// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
model User {
  id   String         @id @unique
  email         String         @unique
  name          String
  folders       Folder[] // One-to-Many relationship with Folder
  flowInstances FlowInstance[] // One-to-Many relationship with FlowInstance
  docs          Doc[]
  
  File    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Folder {
  folderId            String            @id @default(uuid())
  name          String @db.Text
  parentId      Int?
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  flowInstances FlowInstance[] // One-to-Many relationship with FlowInstance
  docs          Doc[]

  @@index([userId])
}

model FlowInstance {
  flowId            String            @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String @db.Text
  nodes     Json
  edges     Json
  folderId  String?
  folder    Folder?  @relation(fields: [flowId], references: [folderId], onDelete: Cascade)
  userId    String // Add a foreign key to connect with the User model
  user      User     @relation(fields: [userId], references: [id]) // Establish the relationship with the User model

  @@index([userId])
  @@index([flowId])
}

model Doc {
  docId           String   @id @default(uuid())
  title     String @db.Text
  folderId  String?
  folder    Folder?  @relation(fields: [docId], references: [folderId], onDelete: Cascade)
  userId    String // Add a foreign key to connect with the User model
  user      User     @relation(fields: [userId], references: [id]) // Establish the relationship with the User model

  content      String
  textEditorContent Json
  createdAt DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([docId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([userId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?

  @@index([userId])
  @@index([fileId])
}
